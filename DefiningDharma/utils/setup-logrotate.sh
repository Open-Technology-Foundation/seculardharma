#!/bin/bash
#shellcheck disable=SC2034,SC1091
set -euo pipefail

# ==============================================================================
# setup-logrotate.sh - Configure logrotate for DefiningDharma logs
# Version: 1.0.0
# ==============================================================================

readonly PRG0="$(readlink -en -- "$0")"
readonly PRGDIR="${PRG0%/*}"
readonly PRG="${PRG0##*/}"

# Source the logger library
source "$PRGDIR/logger.sh"

# Configuration
readonly LOGROTATE_DIR="/etc/logrotate.d"
readonly LOGROTATE_CONFIG="definingdharma"
readonly LOGS_DIR="${PRGDIR%/*}/logs"
readonly VAR_LOG_DIR="/var/log"

# ==============================================================================
# Functions
# ==============================================================================

usage() {
  cat <<EOT
$PRG - Set up logrotate configuration for DefiningDharma logs

Usage:
  $PRG [OPTIONS]

Options:
  -h, --help     Display this help
  -n, --dry-run  Show what would be done without making changes

This script will:
1. Create logrotate configuration for all DefiningDharma logs
2. Create symlinks in /var/log/ for better logrotate integration
3. Test the logrotate configuration

Note: This script requires sudo privileges to write to system directories.
EOT
  exit "${1:-0}"
}

create_logrotate_config() {
  local config_file="$1"
  local logs_pattern="${LOGS_DIR}/*.log"
  local symlink_pattern="/var/log/definingdharma/*.log"
  
  cat <<EOF
# Logrotate configuration for DefiningDharma logs
# Generated by $PRG on $(date)

# Original logs in project directory
${logs_pattern} {
    # Rotate daily
    daily
    
    # Keep 7 days of logs
    rotate 7
    
    # Rotate when file exceeds 100MB
    maxsize 100M
    
    # Compress rotated logs
    compress
    delaycompress
    
    # Don't error if log file is missing
    missingok
    
    # Don't rotate empty files
    notifempty
    
    # Create new log files with permissions
    create 0644 $(id -un) $(id -gn)
    
    # Use date as extension
    dateext
    dateformat -%Y%m%d
    
    # Share scripts between multiple files
    sharedscripts
    
    # Post-rotation script (optional)
    postrotate
        # Signal any running processes if needed
        # Example: killall -USR1 research-dharma.sh 2>/dev/null || true
    endscript
}

# Symlinked logs in /var/log/definingdharma/
${symlink_pattern} {
    # Follow symlinks
    copytruncate
    
    # Same rotation settings
    daily
    rotate 7
    maxsize 100M
    compress
    delaycompress
    missingok
    notifempty
    create 0644 $(id -un) $(id -gn)
    dateext
    dateformat -%Y%m%d
}

# Individual configuration for LOGFILE if defined
$(if [[ -n "${LOGFILE:-}" ]]; then
  echo "${LOGFILE} {"
  echo "    daily"
  echo "    rotate 14"
  echo "    maxsize 50M"
  echo "    compress"
  echo "    delaycompress"
  echo "    missingok"
  echo "    notifempty"
  echo "    create 0644 $(id -un) $(id -gn)"
  echo "    dateext"
  echo "    dateformat -%Y%m%d"
  echo "}"
fi)
EOF
}

create_symlinks() {
  local dry_run="$1"
  
  # /var/log always exists, but check permissions
  if [[ ! -w "$VAR_LOG_DIR" ]] && [[ "$dry_run" == "false" ]]; then
    log_warn "No write permission to $VAR_LOG_DIR. Running with sudo is required."
    return 1
  fi
  
  # Create a subdirectory for DefiningDharma logs
  local dharma_log_dir="${VAR_LOG_DIR}/definingdharma"
  if [[ "$dry_run" == "true" ]]; then
    log_info "[DRY RUN] Would create directory: $dharma_log_dir"
  else
    if [[ ! -d "$dharma_log_dir" ]]; then
      if sudo mkdir -p "$dharma_log_dir" 2>/dev/null; then
        log_info "Created directory: $dharma_log_dir"
        sudo chown "$(id -un):$(id -gn)" "$dharma_log_dir"
      else
        log_warn "Failed to create directory: $dharma_log_dir"
      fi
    fi
  fi
  
  # Create symlinks for all log files
  local log_file
  for log_file in "$LOGS_DIR"/*.log; do
    [[ -f "$log_file" ]] || continue
    
    local link_name="${dharma_log_dir}/$(basename "$log_file")"
    
    if [[ -L "$link_name" ]]; then
      log_info "Symlink already exists: $link_name"
    elif [[ -e "$link_name" ]]; then
      log_warn "File exists but is not a symlink: $link_name"
    else
      if [[ "$dry_run" == "true" ]]; then
        log_info "[DRY RUN] Would create symlink: $link_name -> $log_file"
      else
        if sudo ln -sf "$log_file" "$link_name" 2>/dev/null; then
          log_info "Created symlink: $link_name -> $log_file"
        else
          log_warn "Failed to create symlink: $link_name"
        fi
      fi
    fi
  done
  
  # Create symlink for LOGFILE if defined
  if [[ -n "${LOGFILE:-}" ]] && [[ -f "$LOGFILE" ]]; then
    local link_name="${dharma_log_dir}/$(basename "$LOGFILE")"
    if [[ ! -L "$link_name" ]]; then
      if [[ "$dry_run" == "true" ]]; then
        log_info "[DRY RUN] Would create symlink: $link_name -> $LOGFILE"
      else
        if sudo ln -sf "$LOGFILE" "$link_name" 2>/dev/null; then
          log_info "Created symlink: $link_name -> $LOGFILE"
        else
          log_warn "Failed to create symlink for LOGFILE: $link_name"
        fi
      fi
    fi
  fi
}

test_logrotate_config() {
  local config_file="$1"
  
  log_info "Testing logrotate configuration..."
  
  if sudo logrotate -d "$config_file" 2>&1 | grep -q "error"; then
    log_error "Logrotate configuration test failed!"
    return 1
  else
    log_info "Logrotate configuration test passed"
    return 0
  fi
}

# ==============================================================================
# Main
# ==============================================================================

main() {
  local dry_run=false
  
  # Parse arguments
  while (($#)); do
    case "$1" in
      -h|--help)    usage 0 ;;
      -n|--dry-run) dry_run=true ;;
      *)            log_error "Unknown option: $1"; usage 1 ;;
    esac
    shift
  done
  
  # Check if running with sudo when not in dry-run mode
  if [[ "$dry_run" == "false" ]] && [[ $EUID -ne 0 ]]; then
    log_error "This script must be run with sudo privileges"
    log_info "Try: sudo $0"
    exit 1
  fi
  
  # Create logs directory if it doesn't exist
  if [[ ! -d "$LOGS_DIR" ]]; then
    log_info "Creating logs directory: $LOGS_DIR"
    mkdir -p "$LOGS_DIR"
  fi
  
  # Generate logrotate configuration
  local temp_config="/tmp/${LOGROTATE_CONFIG}.conf"
  log_info "Generating logrotate configuration..."
  create_logrotate_config "$temp_config" > "$temp_config"
  
  if [[ "$dry_run" == "true" ]]; then
    log_info "[DRY RUN] Would create logrotate config at: ${LOGROTATE_DIR}/${LOGROTATE_CONFIG}"
    log_info "Configuration content:"
    cat "$temp_config"
  else
    # Copy configuration to logrotate.d
    local target_config="${LOGROTATE_DIR}/${LOGROTATE_CONFIG}"
    if sudo cp "$temp_config" "$target_config"; then
      log_info "Created logrotate configuration: $target_config"
      sudo chmod 644 "$target_config"
    else
      log_error "Failed to create logrotate configuration"
      exit 1
    fi
    
    # Test the configuration
    if ! test_logrotate_config "$target_config"; then
      log_error "Logrotate configuration test failed. Removing config..."
      sudo rm -f "$target_config"
      exit 1
    fi
  fi
  
  # Create symlinks
  log_info "Setting up log symlinks..."
  create_symlinks "$dry_run"
  
  # Clean up
  rm -f "$temp_config"
  
  if [[ "$dry_run" == "true" ]]; then
    log_info "[DRY RUN] Setup complete. No changes were made."
  else
    log_info "Logrotate setup complete!"
    log_info "Logs will be rotated daily and kept for 7 days"
    log_info "Symlinks created in: /var/log/definingdharma/"
    log_info "You can force rotation with: sudo logrotate -f ${LOGROTATE_DIR}/${LOGROTATE_CONFIG}"
    log_info "View logs with: ls -la /var/log/definingdharma/"
  fi
}

# Run main
main "$@"

#fin